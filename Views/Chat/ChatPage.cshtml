@model List<Talkify.DTOs.MessageDTOs.MessageDTO>
@{
    ViewData["Title"] = "Chat Page";
    var receiverUsername = ViewData["ReceiverUsername"] as string ?? "Unknown";
    var LoggedUserId = ViewData["LoggedUserId"];
    var chatId = ViewData["ChatId"];
    var receiverId = ViewData["ReceiverId"];
}

@section Styles {
    <link rel="stylesheet" href="~/css/ChatPage.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
}

<div class="chat-container">
    <div class="chat-header">
        <h3>@receiverUsername</h3>
        <div id="connectionStatus" class="connection-status">
            <i class="fas fa-circle connected-icon"></i>
            <span>Connected</span>
        </div>
    </div>

    <div class="chat-messages" id="chatMessages">
        @foreach (var message in Model)
        {
            var isMe = message.SenderId == LoggedUserId.ToString();
            <div class="chat-message @(isMe ? "sent" : "received")">
                <div class="message-content">@message.Content</div>
                <div class="message-timestamp" data-time="@message.SentAt.ToString("o")"></div>
            </div>
        }
    </div>


    <form id="messageForm" class="chat-input">
        <input type="text" id="messageInput" name="content" placeholder="Type a message..." required autocomplete="off" />
        <button type="submit" id="sendButton">
            <i class="fas fa-paper-plane"></i>
        </button>
    </form>
</div>

@section Scripts {
    <script src="~/lib/SignalR/signalr.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        connection.start().catch(err => console.error(err.toString()));

        const form = document.getElementById("messageForm");
        const messageInput = document.getElementById("messageInput");
        const chatDiv = document.getElementById("chatMessages");

        form.addEventListener("submit", function (e) {
            e.preventDefault();

            const content = messageInput.value.trim();
            if (!content) return;

            const senderId = "@LoggedUserId";
            const receiverId = "@receiverId";
            const chatId = "@chatId";

            connection.invoke("SendMessage", chatId, senderId, receiverId, content)
                .catch(err => console.error(err.toString()));

            messageInput.value = "";
        });

        connection.on("ReceiveMessage", function (chatId, senderId, receiverId, content) {
            const currentUserId = "@LoggedUserId";
            const isMe = currentUserId === senderId;

            const msg = document.createElement("div");
            msg.classList.add("chat-message", isMe ? "sent" : "received");

            const contentDiv = document.createElement("div");
            contentDiv.classList.add("message-content");
            contentDiv.textContent = content;

            const timeDiv = document.createElement("div");
            timeDiv.classList.add("message-timestamp");

            const now = new Date();
            const formattedTime = now.toLocaleTimeString([], {
                hour: '2-digit',
                minute: '2-digit',
                hour12: true
            });

            timeDiv.textContent = formattedTime;

            msg.appendChild(contentDiv);
            msg.appendChild(timeDiv);
            chatDiv.appendChild(msg);

            // Scroll to bottom automatically
            chatDiv.scrollTop = chatDiv.scrollHeight;
        });

        // Format server-rendered timestamps
        document.querySelectorAll(".message-timestamp").forEach(el => {
            const iso = el.getAttribute("data-time");
            if (iso) {
                const localTime = new Date(iso).toLocaleTimeString([], {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: true
                });
                el.textContent = localTime;
            }
        });
    </script>
}
